from urllib.parse import urlencode 
from urllib.request import Request, urlopen
import json

# cve_id = input('Enter CVE Id:')
# url = 'https://vuldb.com/?api' 	#url endpoint
# post_fields = { 'apikey': API, 'search': cve_id, 'details':'1' }	#request

# request = Request(url, urlencode(post_fields).encode())
# data = json.loads(urlopen(request).read().decode())
# json_response = data['response']
# print('Remaining queries left - ',json_response['remaining'])
# json_result = data['result']
# print('Title - ',json_result[0]['entry'].get('title'))
# print('')
# print('Summary - ',json_result[0]['entry']['summary'])
# print('')
# print('Impact - ', json_result[0]['entry']['details']['impact'])
# print('')
# print('Countermeasure - ', json_result[0]['entry']['details']['countermeasure'])
# print('')
# print('Exploit Prices :')
# print('')
# [print(key, ':', value) for key, value in json_result[0]['exploit']['price'].items()]
# attack_vector = json_result[0]['vulnerability']['cvss3']['vuldb']['basevector']
# base_score = json_result[0]['vulnerability']['cvss3']['meta']['basescore']
# new_attack_vector = attack_vector.replace("\\", "")
# print('CVSS 3 Score -', base_score)
# print('CVSS 3 Attack Vector value -',new_attack_vector)

'''
Output -
Enter CVE Id:CVE-2010-3333


Remaining queries left -  1
Title -  Microsoft Office  up to Xp memory corruption

Summary -  A vulnerability, which was classified as very critical, was found in Microsoft Office up to Xp (Office Suite Software). Affected is an unknown code. Applying a patch is able to eliminate this problem. A possible mitigation has been published immediately after the disclosure of the vulnerability. Furthermore it is possible to detect and prevent this kind of attack with TippingPoint and the filter 10621. 

Impact -  This is going to have an impact on confidentiality, integrity, and availability.

Countermeasure -  Applying a patch is able to eliminate this problem. A possible mitigation has been published immediately after the disclosure of the vulnerability. Furthermore it is possible to detect and prevent this kind of attack with TippingPoint and the filter 10621.

Exploit Prices :
0day : $25k-$100k
today : $0-$5k
CVSS 3 Score - 9.6
CVSS 3 Attack Vector value - AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H
'''

# put api key before running

def vulrul(cve_ID):
	cve_id = cve_ID
	url = 'https://vuldb.com/?api'
	post_fields = { 'apikey': APIKEY, 'search': cve_id, 'details':'1' }
	request = Request(url, urlencode(post_fields).encode())
	data = json.loads(urlopen(request).read().decode())
	json_result = data['result']
	json_response = data['response']
	prices = json_result[0]['exploit']['price']
	attack_vector = json_result[0]['vulnerability']['cvss3']['vuldb']['basevector']
	base_score = json_result[0]['vulnerability']['cvss3']['meta']['basescore']
	new_attack_vector = attack_vector.replace("\\", "")
	summary = json_result[0]['entry']['summary']
	countermeasure = json_result[0]['entry']['details']['countermeasure']
	remaining = json_response['remaining']
	vul_list = [prices, base_score, new_attack_vector, summary, countermeasure, remaining]
	print(vul_list)
	return vul_list

# vulrul("CVE-2010-3333")